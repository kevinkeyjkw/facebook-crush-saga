/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package crush_saga.file;

import crush_saga.data.CrushSagaDataModel;
import crush_saga.data.CrushSagaLevelRecord;
import crush_saga.data.CrushSagaRecord;
import crush_saga.ui.CrushSagaMiniGame;
import crush_saga_main.CrushSaga;
import crush_saga_main.CrushSaga.CrushSagaPropertyType;
import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import properties_manager.PropertiesManager;

/**
 *
 * @author Kevin
 */
public class CrushSagaFileManager {
    private CrushSagaMiniGame game;
    public CrushSagaFileManager(CrushSagaMiniGame miniGame)
    {
        game = miniGame;
    }
    public void loadLevel(String levelFile){
        try{
            File fileToOpen = new File(levelFile);
            
            FileReader inputFile = new FileReader(fileToOpen);
            BufferedReader br = new BufferedReader(inputFile);
            //FIRST THING READ FROM LEVEL FILE IS SCORE REQUIRED TO PASS THE LEVEL
            //((CrushSagaDataModel)game.getDataModel()).setCurrentLevel(levelFile);
            String scoreRequired = br.readLine();
            ((CrushSagaDataModel)game.getDataModel()).setScoreRequired(Integer.parseInt(scoreRequired));
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
    public void saveRecord(CrushSagaRecord recordToSave){
        try{
            //byte [] recordByteArray = recordToSave.toByteArray();
            CrushSagaDataModel data = ((CrushSagaDataModel)game.getDataModel());
            PropertiesManager props = PropertiesManager.getPropertiesManager();
            String dataPath = props.getProperty(CrushSagaPropertyType.DATA_PATH);
            String recordPath = dataPath + props.getProperty(CrushSagaPropertyType.RECORD_FILE_NAME);
            File fileToWrite = new File(recordPath);
            File f = new File(recordPath);
            FileWriter fw = new FileWriter(f);
            BufferedWriter bw = new BufferedWriter(fw);
            
            if(fileToWrite.exists()){
                fileToWrite.delete();
                f.createNewFile();
            }
            HashMap <String, CrushSagaLevelRecord> levelRecords = recordToSave.getLevelRecords();
            ArrayList<String> levels = props.getPropertyOptionsList(CrushSagaPropertyType.LEVEL_OPTIONS);
            bw.write(String.valueOf(levelRecords.size()));//NUMOFLEVELS
            bw.newLine();
            for(int i = 0;i < levelRecords.size();i++){
                    bw.write(levels.get(i));//LEVEL PATH
                    bw.newLine();
                    bw.write(String.valueOf(recordToSave.getHighScore(levels.get(i))));
                    bw.newLine();
                    bw.write(String.valueOf(recordToSave.getStarsEarned(levels.get(i))));
                    bw.newLine();
                    bw.write(String.valueOf(recordToSave.getFastestTime(levels.get(i))));
                    bw.newLine();
                    //CONVERT LONG TO STRING, THEN CONVERT STRING TO INT
            }//FORMAT OF RECORD: NUMOFLEVELS,LEVELONE,HIGHSCORE,STARSEARNED,TOTALTIME
            bw.close();
            //File.create()
            //EVERYTIME YOU SAVE, DELETE OLD FILE, WHEN LOAD FILE, IF NO FILE EXISTS DO NOTHING
            //WHEN SAVING, NO MATTER IF FILE EXISTS OR NOT, USE FILE.CREATE(),AND SAVE THE RECORD. DON'T USE
            //BYTEARRAY, USE TXT AND BUFFEREDWRITER,FILEWRITER,BUFFEREDREADER,FILEREADER, USE TWO FOR LOOPS
            /*
            FileOutputStream fos = new FileOutputStream(fileToWrite);
            BufferedOutputStream bos = new BufferedOutputStream(fos);
            bos.write(recordByteArray);
            bos.close();
            */
            
        }catch(IOException ioe){
            ioe.printStackTrace();
        }
        
    }
    public CrushSagaRecord loadRecord(){
        CrushSagaRecord recordToLoad = new CrushSagaRecord();
        try{
            PropertiesManager props = PropertiesManager.getPropertiesManager();
            String dataPath = props.getProperty(CrushSagaPropertyType.DATA_PATH);
            String recordPath = dataPath + props.getProperty(CrushSagaPropertyType.RECORD_FILE_NAME);
            File fileToOpen = new File(recordPath);
            
            
           /* byte [] bytes = new byte[Long.valueOf(fileToOpen.length()).intValue()];
            ByteArrayInputStream bais = new ByteArrayInputStream(bytes);
            FileInputStream fis = new FileInputStream(fileToOpen);
            BufferedInputStream bis = new BufferedInputStream(fis);
            
            bis.read(bytes);
            bis.close();
            //THE RECORD FILE SHOULD BE IN THIS FORMAT: NUMOFLEVELS,LEVEL ONE NAME,LEVEL ONE HIGH SCORE,LEVEL ONE STARS EARNED, LEVEL ONE
            //FASTEST TIME. EX: 100 1000 2 100000 etc
            DataInputStream dis = new DataInputStream(bais);
            */
            if(fileToOpen.exists()){
            FileReader fr = new FileReader(fileToOpen);
            BufferedReader br = new BufferedReader(fr);
            br.mark(10);
            int numLevels = 0;
            if(br.readLine()!= null){
                br.reset();
                numLevels = Integer.parseInt(br.readLine());
            }
                for(int i = 0;i < numLevels;i++){
                String levelName = br.readLine();
                CrushSagaLevelRecord levelRecord = new CrushSagaLevelRecord();
                levelRecord.highScore = Integer.parseInt(br.readLine());
                levelRecord.starsEarned = Integer.parseInt(br.readLine());
                levelRecord.fastestTime = Integer.parseInt(br.readLine());
                recordToLoad.addCrushSagaLevelRecord(levelName, levelRecord);
                }
            }
        }catch(IOException ioe){
            ioe.printStackTrace();
        }
        return recordToLoad;
    }
}
