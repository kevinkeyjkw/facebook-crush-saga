/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package crush_saga.data;

import crush_saga.ui.CrushSagaMiniGame;
import static crush_saga_main.CrushSagaConstants.*;
import crush_saga.ui.CrushSagaPanel;
import crush_saga.ui.CrushSagaTile;
import crush_saga_main.CrushSaga.CrushSagaPropertyType;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import java.util.Collections;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JOptionPane;
import mini_game.MiniGame;
import mini_game.MiniGameDataModel;
import mini_game.Sprite;
import mini_game.SpriteType;
import properties_manager.PropertiesManager;

/**
 *
 * @author Kevin
 */
public class CrushSagaDataModel extends MiniGameDataModel{
    private MiniGame game;
    private CrushSagaPanel sagaPanel;
    private SpriteType tileASpriteType;
    private SpriteType tileBSpriteType;
    private SpriteType tileCSpriteType;
    private SpriteType tileDSpriteType;
    private SpriteType tileESpriteType;
    private SpriteType tileFSpriteType;
    
    private Timer timer;
    
    
    GregorianCalendar startTime;
    GregorianCalendar endTime;
    private int gameScore = 0;
    private int starsEarned = 1;
    private int scoreRequired = 1000;
    private String currentLevel;
    
    CrushSagaTile selectedTile = null;
    boolean matches=false;
            
    private int gridColumns = 10;
    private int gridRows = 10;
    private CrushSagaTile[][] tileGrid;
    private ArrayList<CrushSagaTile> stackTiles;
    private ArrayList<CrushSagaTile> movingTiles;
    public CrushSagaDataModel(MiniGame initMiniGame)
    {
        game = initMiniGame;
        sagaPanel = (CrushSagaPanel)game.getCanvas();
        stackTiles = new ArrayList();
        tileGrid = new CrushSagaTile[gridColumns][gridRows];
        movingTiles = new ArrayList();
        //only has to be done once during entire application
         initTileSpriteTypes();
    }
    
    public void initTileSpriteTypes()
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        String imgPath = props.getProperty(CrushSagaPropertyType.IMG_PATH);
        String tile_image_file_path;
        BufferedImage img;
        //initiate tileASpriteType
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_A_TILE_IMAGE_NAME));
        tileASpriteType = new SpriteType(TILE_SPRITE_TYPE_A);
        tileASpriteType.addState(INVISIBLE_STATE, img);
        tileASpriteType.addState(VISIBLE_STATE, img);
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_A_TILE_SELECTED_IMAGE_NAME));
        tileASpriteType.addState(SELECTED_STATE,img);
        //initiate tileBSpriteType
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_B_TILE_IMAGE_NAME));
        tileBSpriteType = new SpriteType(TILE_SPRITE_TYPE_B);
        tileBSpriteType.addState(INVISIBLE_STATE, img);
        tileBSpriteType.addState(VISIBLE_STATE, img);
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_B_TILE_SELECTED_IMAGE_NAME));
        tileBSpriteType.addState(SELECTED_STATE,img);
        //initiate tileCSpriteType
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_C_TILE_IMAGE_NAME));
        tileCSpriteType = new SpriteType(TILE_SPRITE_TYPE_C);
        tileCSpriteType.addState(INVISIBLE_STATE, img);
        tileCSpriteType.addState(VISIBLE_STATE, img);
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_C_TILE_SELECTED_IMAGE_NAME));
        tileCSpriteType.addState(SELECTED_STATE,img);
        //initiate tileDSpriteType
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_D_TILE_IMAGE_NAME));
        tileDSpriteType = new SpriteType(TILE_SPRITE_TYPE_D);
        tileDSpriteType.addState(INVISIBLE_STATE, img);
        tileDSpriteType.addState(VISIBLE_STATE, img);
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_D_TILE_SELECTED_IMAGE_NAME));
        tileDSpriteType.addState(SELECTED_STATE,img);
        //initiate tileESpriteType
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_E_TILE_IMAGE_NAME));
        tileESpriteType = new SpriteType(TILE_SPRITE_TYPE_E);
        tileESpriteType.addState(INVISIBLE_STATE, img);
        tileESpriteType.addState(VISIBLE_STATE, img);
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_E_TILE_SELECTED_IMAGE_NAME));
        tileESpriteType.addState(SELECTED_STATE,img);
        //initiate tileFSpriteType
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_F_TILE_IMAGE_NAME));
        tileFSpriteType = new SpriteType(TILE_SPRITE_TYPE_F);
        tileFSpriteType.addState(INVISIBLE_STATE, img);
        tileFSpriteType.addState(VISIBLE_STATE, img);
        img = game.loadImage(imgPath + props.getProperty(CrushSagaPropertyType.TYPE_F_TILE_SELECTED_IMAGE_NAME));
        tileFSpriteType.addState(SELECTED_STATE,img);
    }
    public void initTiles()
    {
        int totalInitialTiles = gridColumns * gridRows;
        
        for(int i = 0;i < totalInitialTiles;i++)
        {
            stackTiles.add(generateRandomTile());
        }
        
    }
    public void createNoMatchesGrid()
    {
        emptyStackTiles();
        for(int j = 0;j < gridColumns;j++){//Initiate grid with abab crisscrossing so no pairs can be matched, then insert test tiles
            for(int i = 0;i < gridRows;i++){
                if(j % 2 == 0)
                {
                    if(i % 2 == 0)
                    {//a tile
                        moveTileWithinGrid(createTypeATile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }else
                    {//b tile
                        moveTileWithinGrid(createTypeBTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }
                
                }else
                {
                    if(i % 2 == 0)
                    {//b tile
                        moveTileWithinGrid(createTypeBTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }else
                    {//a tile
                        moveTileWithinGrid(createTypeATile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }
                }
            }
        }
    }
    public void initTestOneGrid()
    {
        createNoMatchesGrid();
        //INSERT TEST SITUATION INTO GRID
        //HORIZONTAL 3-IN-ROW
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,2,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,1,MAX_TILE_VELOCITY);
        //VERTICAL 3-IN-ROW
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,4,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),2,4,MAX_TILE_VELOCITY);
        
    }
    public void initTestTwoGrid()
    {
        createNoMatchesGrid();
        //HORIZONTAL 4-IN-ROW
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),2,1,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),3,0,MAX_TILE_VELOCITY);
        //VERTICAL 4-IN-ROW
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,3,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,4,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,6,MAX_TILE_VELOCITY);
    }
    public void initTestThreeGrid()
    {
        createNoMatchesGrid();
        //HORIZONTAL 5-IN-ROW
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),2,1,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),3,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),4,0,MAX_TILE_VELOCITY);
        //VERTICAL 5-IN-ROW
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,3,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,4,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,6,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,7,MAX_TILE_VELOCITY);
    }
    public void initTestFourGrid()
    {
        //T SHAPE,4 CONFIGURATIONS
        createNoMatchesGrid();
        //FIRST CONFIGURATION
         moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,1,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),2,1,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,2,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,3,MAX_TILE_VELOCITY);
        //SECOND CONFIGURATION
         moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),4,1,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),5,1,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),7,1,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,2,MAX_TILE_VELOCITY);
        //THIRD CONFIGURATION
         moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,6,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,7,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),2,6,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),3,6,MAX_TILE_VELOCITY);
        //FOURTH CONFIGURATION
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),5,6,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,4,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,7,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),7,6,MAX_TILE_VELOCITY);
        
    }
    public void initTestFiveGrid()
    {
        //L SHAPE
        createNoMatchesGrid();
        //FIRST CONFIGURATION
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,1,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,3,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,2,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),2,2,MAX_TILE_VELOCITY);
        //SECOND CONFIGURATION
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),4,2,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),5,2,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,0,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,1,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,3,MAX_TILE_VELOCITY);
        //THIRD CONFIGURATION
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),0,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),1,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),3,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),2,6,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),2,7,MAX_TILE_VELOCITY);
        //FOURTH CONFIGURATION
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),5,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),7,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),8,5,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,6,MAX_TILE_VELOCITY);
        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),6,7,MAX_TILE_VELOCITY);
        
    }
    public void createNoMovesGrid()
    {
        for(int j = 0;j < gridRows;j++){
            for(int i =0;i < gridColumns;i++){
                if(j % 2 == 0)//J IS EVEN,TILEA,TILEB,TILEC,ETC
                {
                    if(i % 3 == 0){
                        moveTileWithinGrid(createTypeATile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }else if(i % 3 == 1){
                        moveTileWithinGrid(createTypeBTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }else if(i % 3 == 2){
                        moveTileWithinGrid(createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }
                }else//J IS ODD,TILED,TILEE,TILEF,ETC
                {
                    if(i % 3 == 0){
                        moveTileWithinGrid(createTypeDTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }else if(i % 3 == 1){
                        moveTileWithinGrid(createTypeETile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }else if(i % 3 == 2){
                        moveTileWithinGrid(createTypeFTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE),i,j,MAX_TILE_VELOCITY);
                    }
                }
            }
        }
    }
    public CrushSagaTile generateRandomTile()
    {
        double rand = Math.random();
            if(rand < 0.16){
                return createTypeATile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE);
            }else if(rand < 0.32){
                return createTypeBTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE);
            }else if(rand < 0.48){
                return createTypeCTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE);
            }else if(rand < 0.64){
                return createTypeDTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE);
            }else if(rand < 0.8){
                return createTypeETile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE);
            }else{
                return createTypeFTile(unassignedTilesX,unassignedTilesY,0,0,VISIBLE_STATE);
            }
            
        
    }
    //GENERATES A TYPE A TILE
    public CrushSagaTile createTypeATile(float initX,float initY,float initVx,float initVy,String initState)
    {
        CrushSagaTile newTile = new CrushSagaTile(tileASpriteType,initX,initY,initVx,initVy,initState,TILE_TYPE_A);
        return newTile;
    }
    //GENERATES A TYPE B TILE
    public CrushSagaTile createTypeBTile(float initX,float initY,float initVx,float initVy,String initState)
    {
        CrushSagaTile newTile = new CrushSagaTile(tileBSpriteType,initX,initY,initVx,initVy,initState,TILE_TYPE_B);
        return newTile;
    }
    //GENERATES A TYPE C TILE
    public CrushSagaTile createTypeCTile(float initX,float initY,float initVx,float initVy,String initState)
    {
        CrushSagaTile newTile = new CrushSagaTile(tileCSpriteType,initX,initY,initVx,initVy,initState,TILE_TYPE_C);
        return newTile;
    }
    //GENERATES A TYPE D TILE
    public CrushSagaTile createTypeDTile(float initX,float initY,float initVx,float initVy,String initState)
    {
        CrushSagaTile newTile = new CrushSagaTile(tileDSpriteType,initX,initY,initVx,initVy,initState,TILE_TYPE_D);
        return newTile;
    }
    //GENERATES A TYPE E TILE
    public CrushSagaTile createTypeETile(float initX,float initY,float initVx,float initVy,String initState)
    {
        CrushSagaTile newTile = new CrushSagaTile(tileESpriteType,initX,initY,initVx,initVy,initState,TILE_TYPE_E);
        return newTile;
    }
    //GENERATES A TYPE F TILE
    public CrushSagaTile createTypeFTile(float initX,float initY,float initVx,float initVy,String initState)
    {
        CrushSagaTile newTile = new CrushSagaTile(tileFSpriteType,initX,initY,initVx,initVy,initState,TILE_TYPE_F);
        return newTile;
    }
    
    public void scrollUp()
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        Sprite s = game.getGUIDecor().get(BACKGROUND_TYPE);
        if(((CrushSagaMiniGame)game).getCurrentScreenState().equals(SAGA_SCREEN_STATE) && s.getY() < 0)
        {
        float currentY = s.getY();
        s.setY(currentY + 10);
        
        ArrayList<String> levels = props.getPropertyOptionsList(CrushSagaPropertyType.LEVEL_OPTIONS);
        for(String level: levels)
            {
            float levelY = game.getGUIButtons().get(level).getY();
            game.getGUIButtons().get(level).setY(levelY + 10);
            }
        }
    }
    public void scrollDown()
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        Sprite s = game.getGUIDecor().get(BACKGROUND_TYPE);
        if(((CrushSagaMiniGame)game).getCurrentScreenState().equals(SAGA_SCREEN_STATE) && s.getY() > SAGA_SCREEN_INITIAL_Y )
        {
        float currentY = s.getY();
        s.setY(currentY - 10);
        
        ArrayList<String> levels = props.getPropertyOptionsList(CrushSagaPropertyType.LEVEL_OPTIONS);
        for(String level: levels)
            {
            float levelY = game.getGUIButtons().get(level).getY();
            game.getGUIButtons().get(level).setY(levelY - 10);
            }
        
        }
    }
    public void displayLevelDialog()
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        game.getGUIDialogs().get(LEVEL_DIALOG_TYPE).setState(VISIBLE_STATE);
        //activate level buttons when level dialog is open
        ArrayList<String> levels = props.getPropertyOptionsList(CrushSagaPropertyType.LEVEL_OPTIONS);
        for(String level: levels)
        {
            game.getGUIButtons().get(level).setEnabled(false);
        }
    }
    public void closeLevelDialog()
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        game.getGUIDialogs().get(LEVEL_DIALOG_TYPE).setState(INVISIBLE_STATE);
        //disabled level buttons when level dialog is open
        ArrayList<String> levels = props.getPropertyOptionsList(CrushSagaPropertyType.LEVEL_OPTIONS);
        for(String level: levels)
        {
            game.getGUIButtons().get(level).setEnabled(true);
        }
    }
    //only called when switching between screens, just empty the stack and tile grid, when play level, generate new tiles
    public void enableTiles(boolean enable)
    {
        stackTiles = new ArrayList();
        tileGrid = new CrushSagaTile[gridColumns][gridRows];
        
    }
    public int calculateGridCellColumn(int x)
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        int gameWidth = Integer.parseInt(props.getProperty(CrushSagaPropertyType.GAME_WIDTH.toString()));
        int columnValue = gridColumns - ((int)(gameWidth - x))/TILE_IMAGE_WIDTH - 1;
        return columnValue;
    }
    public int calculateGridCellRow(int y)
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        int gameHeight = Integer.parseInt(props.getProperty(CrushSagaPropertyType.GAME_HEIGHT.toString()));
        int rowValue = gridRows - ((int)(gameHeight - y))/TILE_IMAGE_HEIGHT - 1;
        return rowValue;
    }
    public int calculateTileXInGrid(int column)
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        int gameWidth = Integer.parseInt(props.getProperty(CrushSagaPropertyType.GAME_WIDTH.toString()));
        int cellWidth = TILE_IMAGE_WIDTH;
        return (int)(gameWidth - (cellWidth * (gridColumns -column)));
    }
    public int calculateTileYInGrid(int row)
    {
        PropertiesManager props = PropertiesManager.getPropertiesManager();
        int gameHeight = Integer.parseInt(props.getProperty(CrushSagaPropertyType.GAME_HEIGHT.toString()));
        int cellHeight = TILE_IMAGE_HEIGHT;
        return (int)(gameHeight - (cellHeight * (gridRows -row)));
    }
    @Override
    public void checkMousePressOnSprites(MiniGame game, int x, int y) 
    {
        int col = calculateGridCellColumn(x);
        int row = calculateGridCellRow(y);
        if(col < gridColumns && col >= 0 && row < gridRows && row >= 0 && tileGrid[col][row] != null)
            selectTile(tileGrid[col][row]);
        
    }
    @Override
    public void checkMouseDragOnSprites(MiniGame game,int x,int y)
    {
        int col = calculateGridCellColumn(x);
        int row = calculateGridCellRow(y);
        int changeInY = Math.abs(y - lastMouseY);//IF CHANGEINY > CHANGINX MOVE UP OR DOWN, ELSE MOVE RIGHT OR LEFT, REMEMBER NOT TO LEAVE GRID
        int changeInX = Math.abs(x - lastMouseX);
        if(col < gridColumns && col >= 0 && row < gridRows && row >= 0 && tileGrid[col][row] != null)//CHECK IF DRAG IS IN GRID
        {
            //LET TILE MOVE WITH MOUSE UNTIL MOVED MORE THAN IMAGE SIZE, THEN SWAP REGARDLESS OF LEGAL OR ILLEGAL MOVE
            if(changeInY >= changeInX && y >= calculateTileYInGrid(0) + TILE_IMAGE_HEIGHT/2 && y <= calculateTileYInGrid(gridRows-1) + TILE_IMAGE_HEIGHT/2)//PREVENT TOP AND BOTTOM MOST TILES FROM EXITING GRID
            {//changeInY >= changeInX && y >= calculateTileYInGrid(0) + TILE_IMAGE_HEIGHT/2 && y <= calculateTileYInGrid(gridRows-1)-TILE_IMAGE_HEIGHT/2
                moveTile(tileGrid[col][calculateGridCellRow(lastMouseY)],calculateTileXInGrid(col),y - TILE_IMAGE_HEIGHT/2,TILE_GRID_VELOCITY);
                if(changeInY > TILE_IMAGE_HEIGHT){
                    setStopDragging(true);
                    if(y < lastMouseY)//UP,SWAP WITH TOP TILE,ONLY SWAP IF NOT TOPMOST AND BOTTOM MOST TILE
                    {
                        tileGrid[col][row+1].setState(VISIBLE_STATE);
                        selectedTile = null;
                        swapTiles(tileGrid[col][row+1],tileGrid[col][row]);
                    }else if(y > lastMouseY)
                    {//DOWN,SWAP WITH BOTTOM TILE
                        tileGrid[col][row-1].setState(VISIBLE_STATE);
                        selectedTile = null;
                        swapTiles(tileGrid[col][row-1],tileGrid[col][row]);
                    }//THE REASON IT IS ROW-1 IS ONCE YOU'VE PAST THE MID POINT MARK, TILEGRID[COL][ROW]IS NOT THE ORIGINAL ONE YOU WERE MOVING
                }
            }
            else if(changeInX > changeInY && x >= calculateTileXInGrid(0) + TILE_IMAGE_WIDTH/2 && x <= calculateTileXInGrid(gridRows-1) + TILE_IMAGE_WIDTH/2)
            {
                moveTile(tileGrid[calculateGridCellColumn(lastMouseX)][row],x - TILE_IMAGE_HEIGHT/2,calculateTileYInGrid(row),TILE_GRID_VELOCITY);
                if(changeInX > TILE_IMAGE_WIDTH){
                    setStopDragging(true);
                    if(x < lastMouseX)
                    {
                        tileGrid[col+1][row].setState(VISIBLE_STATE);
                        selectedTile = null;
                        swapTiles(tileGrid[col+1][row],tileGrid[col][row]);
                    }else if(x > lastMouseX)
                    {
                        tileGrid[col-1][row].setState(VISIBLE_STATE);
                        selectedTile = null;
                        swapTiles(tileGrid[col-1][row],tileGrid[col][row]);
                    }
                    
                }
            }
            //SWAP IF REACH PAST HALF TILE IMAGE SIZE
            
        }
    }
    
    //THIS METHOD CHANGES THE TILE TO SELECTED_STATE OR VISIBLE_STATE
    public void selectTile(CrushSagaTile tileSelected)
    {
        //NO TILE HAS BEEN SELECTED
        if(selectedTile == null)
        {
            selectedTile = tileSelected;
            tileSelected.setState(SELECTED_STATE);
        }else if(selectedTile == tileSelected)
        {
            tileSelected.setState(VISIBLE_STATE);
            selectedTile = null;
        }else if(XOR(tileSelected.getGridRow() == selectedTile.getGridRow(),tileSelected.getGridColumn() == selectedTile.getGridColumn())
                && (tileSelected.getGridRow() == (selectedTile.getGridRow() -1) || 
                tileSelected.getGridRow() == (selectedTile.getGridRow() + 1) ||
                tileSelected.getGridColumn() == (selectedTile.getGridColumn() + 1) ||
                tileSelected.getGridColumn() == (selectedTile.getGridColumn() - 1))){
            //ALREADY A TILE SELECTED, JUST CHECK IF LEGAL MOVE, IF SO THEN SWITCH THE TWO TILES,
            //DELETEMATCHES() WILL GET RID OF THEM FILL EMPTYCELLS() WILL FILL UP THE VACANT SPACES
            //THIS CONDITION CHECKS IF IT IS LEGAL MOVE, ONE TILE N,S,EAST,WEST
            swapTiles(selectedTile,tileSelected);
            //ADD INTO MOVING TILES
            //CALL DELETEMATCHES(), IT SHOULD RETURN BOOLEAN, IF RETURN FALSE, MOVE TILES BACK TO ORIGINAL POSITIONS, IF TRUE, DO NOTHING
            
            matches = deleteMatches();
            if(!matches){
                
                swapTiles(selectedTile,tileSelected);//NO MATCHES FOUND, SO ILLEGAL MOVE, SWAP THEM BACK
            }
            
            selectedTile.setState(VISIBLE_STATE);
            selectedTile = null;
        }
    }
    public boolean deleteMatches()
    {
        //CHECK GRID FOR 3XMATCHES,4XMATCHES,5XMATCHES,ONLY VERTICAL OR HORIZONTAL!
        //CHECK 5 IN A ROW FIRST, THEN 4 IN A ROW, THEN FINALLY 3 IN A ROW
        //CHECK HORIZONTALLY THEN VERTICALLY
        for(int i = 0;i < gridColumns;i++){//initiated as such: tileGrid[gridColumns][gridRows]
            for(int j = 0;j < gridRows;j++){
                if(j < gridRows - 4 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+1].getSpriteType().getSpriteTypeID()) 
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+2].getSpriteType().getSpriteTypeID())
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+3].getSpriteType().getSpriteTypeID())
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+4].getSpriteType().getSpriteTypeID()))
                {//IF 5 IN A ROW
                    //ADD POINTS TO GAMESCORE
                    gameScore += 200;
                    //DELETE THOSE TILES
                    tileGrid[i][j] = null;
                    tileGrid[i][j+1] = null;
                    tileGrid[i][j+2] = null;
                    tileGrid[i][j+3] = null;
                    tileGrid[i][j+4] = null;
                    //REPLACE THEM WITH TILES ABOVE THEM IF ANY
                        for(int k=j-1;k >= 0;k--)
                        {
                            moveTileWithinGrid(tileGrid[i][k],i,k+5,TILE_GRID_VELOCITY);
                            tileGrid[i][k] = null;
                        }
                        //FILL IN EMPTY CELLS
                    fillEmptyCells();
                    return true;
                }else if(j < gridRows - 3 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+1].getSpriteType().getSpriteTypeID()) 
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+2].getSpriteType().getSpriteTypeID())
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+3].getSpriteType().getSpriteTypeID()))
                {//4 IN A ROW
                    gameScore += 100;
                    tileGrid[i][j] = null;
                    tileGrid[i][j+1] = null;
                    tileGrid[i][j+2] = null;
                    tileGrid[i][j+3] = null;
                    for(int k=j-1;k >= 0;k--)
                        {
                            moveTileWithinGrid(tileGrid[i][k],i,k+4,TILE_GRID_VELOCITY);
                            tileGrid[i][k] = null;
                        }
                  fillEmptyCells();
                    return true;
                }else if(j < gridRows - 2 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+1].getSpriteType().getSpriteTypeID()) 
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+2].getSpriteType().getSpriteTypeID()))
                {//3 IN A ROW VERTICALLY
                    //%%%
                    //  % SHAPED
                    //  %
                    if(i>= 2 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-2][j].getSpriteType().getSpriteTypeID()))
                    {
                        gameScore+= 300;
                        tileGrid[i-1][j] = null;
                        tileGrid[i-2][j] = null;
                        int count = 1;
                        int m = i-2;
                        while(count >= 0){
                            for(int k = j-1;k>=0;k--){
                                moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                                tileGrid[m][k] = null;
                            }
                            count--;
                            m++;
                        }
                    }else if(i >= 2 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j+2].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-2][j+2].getSpriteType().getSpriteTypeID()))
                    {                           //  %
                                                //  %
                                                //%%%
                        gameScore+= 300;
                        tileGrid[i-1][j+2] = null;
                        tileGrid[i-2][j+2] = null;
                        int count = 1;
                        int m = i-2;
                        while(count >= 0){
                            for(int k = j+1;k >=0;k--){
                                moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                                tileGrid[m][k] = null;
                            }
                            count--;
                            m++;
                        }
                        
                    }else if(i <= gridRows - 3 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+2].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j+2].getSpriteType().getSpriteTypeID()))
                    {   //%
                        //%
                        //%%%
                        gameScore += 300;
                        tileGrid[i+1][j+2] = null;
                        tileGrid[i+2][j+2] = null;
                        int count = 1;
                        int m = i+1;
                        while(count >= 0){
                            for(int k = j+1;k >= 0;k--){
                                moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                                tileGrid[m][k] = null;
                            }
                            count--;
                            m++;
                        }
                                
                    }else if(i <= gridRows - 3 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j].getSpriteType().getSpriteTypeID()))
                    {   //%%%
                        //%
                        //%
                        gameScore += 300;
                        tileGrid[i+1][j] = null;
                        tileGrid[i+2][j] = null;
                        int count = 1;
                        int m = i+1;
                        while(count >= 0){
                            for(int k = j-1;k >= 0;k--){
                                moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                                tileGrid[m][k] = null;
                            }
                            count--;
                            m++;
                        }
                    }else if(i > 0 && i < gridColumns - 1 &&
                            tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j].getSpriteType().getSpriteTypeID())&&
                            tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j].getSpriteType().getSpriteTypeID()))
                    {   //%%%
                        // %
                        // %
                        gameScore += 350;
                        tileGrid[i-1][j] = null;
                        tileGrid[i+1][j] = null;
                        int count = 1;
                        int m = i-1;
                        while(count >= 0){
                            for(int k = j-1;k >= 0;k--){
                                moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                                tileGrid[m][k] = null;
                            }
                            count--;
                            m += 2;
                        }
                    }else if(i > 1 && 
                            tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j+1].getSpriteType().getSpriteTypeID())&&
                            tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-2][j+1].getSpriteType().getSpriteTypeID()))
                    {   //  %
                        //%%%
                        //  %
                        gameScore += 350;
                        tileGrid[i-1][j+1] = null;
                        tileGrid[i-2][j+1] = null;
                        int count = 1;
                        int m = i-2;
                        while(count >= 0){
                            for(int k = j;k >= 0;k--){
                                moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                                tileGrid[m][k] = null;
                            }
                            count--;
                            m++;
                        }
                    }else if(i > 0 && i < gridColumns - 1 &&
                            tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+2].getSpriteType().getSpriteTypeID())&&
                            tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j+2].getSpriteType().getSpriteTypeID()))
                    {   // %
                        // %
                        //%%%
                        gameScore += 350;
                        tileGrid[i+1][j+2] = null;
                        tileGrid[i-1][j+2] = null;
                        int count = 1;
                        int m = i-1;
                        while(count >= 0){
                            for(int k = j + 1;k >= 0;k--){
                                moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                                tileGrid[m][k] = null;
                            }
                            count--;
                            m += 2;
                        }
                    }else if(i < gridColumns - 2 &&
                            tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+1].getSpriteType().getSpriteTypeID())&&
                            tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j+1].getSpriteType().getSpriteTypeID()))
                    {   //%
                        //%%%
                        //%
                        gameScore += 350;
                        tileGrid[i+1][j+1] = null;
                        tileGrid[i+2][j+1] = null;
                        int count = 1;
                        int m = i+1;
                        while(count >= 0){
                            for(int k = j;k >= 0;k--){
                                moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                                tileGrid[m][k] = null;
                            }
                            count--;
                            m++;
                        }
                    }else
                    {//ONLY THREE IN A ROW, SO ADD SCORE, 
                        gameScore += 50;
                    }
                    //DELETES THREE VERTICALLY NO MATTER WHAT L SHAPE
                    tileGrid[i][j] = null;
                    tileGrid[i][j+1] = null;
                    tileGrid[i][j+2] = null;
                    for(int k=j-1;k >= 0;k--)
                        {
                            moveTileWithinGrid(tileGrid[i][k],i,k+3,TILE_GRID_VELOCITY);
                            tileGrid[i][k] = null;
                        }
                fillEmptyCells();
                    return true;
                }//FINISH CHECKING MATCHES VERTICALLY
                
            }
        }
        for(int j = 0;j < gridRows;j++){
            for(int i = 0;i < gridColumns;i++){
                if(i < gridColumns - 4 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j].getSpriteType().getSpriteTypeID()) 
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j].getSpriteType().getSpriteTypeID())
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+3][j].getSpriteType().getSpriteTypeID())
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+4][j].getSpriteType().getSpriteTypeID()))
                {//IF 5 IN A ROW
                    gameScore += 200;
                    //DELETE THOSE TILES
                    tileGrid[i][j] = null;
                    tileGrid[i+1][j] = null;
                    tileGrid[i+2][j] = null;
                    tileGrid[i+3][j] = null;
                    tileGrid[i+4][j] = null;
                    //REPLACE THEM WITH TILES ABOVE THEM IF ANY
                    int count = 4;
                    int m = i;
                    while(count >= 0){
                        for(int k=j-1;k >= 0;k--)
                        {
                            moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                            tileGrid[m][k] = null;
                        }
                        count--;
                        m++;
                    }
                        //FILL IN EMPTY CELLS
                       fillEmptyCells();
                    return true;
                }else if(i < gridRows - 3 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j].getSpriteType().getSpriteTypeID()) 
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j].getSpriteType().getSpriteTypeID())
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+3][j].getSpriteType().getSpriteTypeID()))
                {//4 IN A ROW
                    gameScore += 100;
                    tileGrid[i][j] = null;
                    tileGrid[i+1][j] = null;
                    tileGrid[i+2][j] = null;
                    tileGrid[i+3][j] = null;
                    int count = 3;
                    int m = i;
                    while(count >= 0){
                        for(int k=j-1;k >= 0;k--)
                        {
                            moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                            tileGrid[m][k] = null;
                        }
                        count--;
                        m++;
                    }
                    fillEmptyCells();
                    return true;
                }else if(i < gridRows - 2 && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j].getSpriteType().getSpriteTypeID()) 
                        && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j].getSpriteType().getSpriteTypeID()))
                {//3 IN A ROW 
                    gameScore += 50; 
                    tileGrid[i][j] = null;
                    tileGrid[i+1][j] = null;
                    tileGrid[i+2][j] = null;
                    int count = 2;
                    int m = i;
                    while(count >= 0){
                        for(int k=j-1;k >= 0;k--)
                        {
                            moveTileWithinGrid(tileGrid[m][k],m,k+1,TILE_GRID_VELOCITY);
                            tileGrid[m][k] = null;
                        }
                        count--;
                        m++;
                    }
                    fillEmptyCells();
                    return true;
                }
                
            }
        }
        return false;
    }
    public boolean movesRemaining()
    {
        for(int i = 0;i < gridColumns;i++){
            for(int j = 0;j < gridRows;j++){
                if(i < gridColumns - 2 && j < gridRows - 1)
                {
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j+1].getSpriteType().getSpriteTypeID()))
                        return true;
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j].getSpriteType().getSpriteTypeID()))
                    {
                        return true;
                    }
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j+1].getSpriteType().getSpriteTypeID()))
                    {//8
                        return true;
                    }
                    
                }
                if(i < gridColumns - 3)//hor
                {
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+3][j].getSpriteType().getSpriteTypeID()))
                    {//2
                        return true;
                    }
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+3][j].getSpriteType().getSpriteTypeID()))
                    {//7
                        return true;
                    }
                }
                if(j > 0 && i < gridColumns - 2)//hor
                {
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j-1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j-1].getSpriteType().getSpriteTypeID()))//3
                    {
                        return true;
                    }
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j-1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j].getSpriteType().getSpriteTypeID()))//5
                    {
                        return true;
                    }
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j-1].getSpriteType().getSpriteTypeID()))//6
                    {
                        return true;
                    }
                }
                if(i > 0 && j < gridRows - 2)//ver
                {
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j+2].getSpriteType().getSpriteTypeID()))//1
                    {
                        return true;
                    }
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+2].getSpriteType().getSpriteTypeID()))//5
                    {
                        return true;
                    }
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j+2].getSpriteType().getSpriteTypeID()))//8
                    {
                        return true;
                    }
                }
                if(j < gridRows - 3)//ver
                {
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+3].getSpriteType().getSpriteTypeID()))//2
                    {
                        return true;
                    }
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+2].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+3].getSpriteType().getSpriteTypeID()))//7
                    {
                        return true;
                    }
                }
                if(i < gridColumns - 1 && j < gridRows - 2)//ver
                {
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+2].getSpriteType().getSpriteTypeID()))//3
                    {
                        return true;
                    }
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+2].getSpriteType().getSpriteTypeID()))//4
                    {
                        return true;
                    }
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+2].getSpriteType().getSpriteTypeID()))//6
                    {
                        return true;
                    }
                }
                if(i < gridColumns - 2 && j < gridRows - 3)//L
                {
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+3].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+2].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j+2].getSpriteType().getSpriteTypeID()))//1
                    {
                        return true;
                    }
                }
                if(i > 0 && i < gridColumns - 2 && j < gridRows - 2)//L
                {
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j+2].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+2].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+2][j+2].getSpriteType().getSpriteTypeID()))//2
                    {
                        return true;
                    }
                }
                if(i > 0 && i < gridColumns - 1 && j < gridRows - 3)//T
                {
                    if(tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i-1][j+1].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+2].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i][j+3].getSpriteType().getSpriteTypeID())
                            && tileGrid[i][j].getSpriteType().getSpriteTypeID().equals(tileGrid[i+1][j+1].getSpriteType().getSpriteTypeID()))//1
                    {
                        return true;
                    }
                }
                
            }
        }
        return false;
    }
    public void moveTileWithinGrid(CrushSagaTile tileToBeMoved,int gridCol,int gridRow,int velocity)
    {
            tileToBeMoved.setTarget(calculateTileXInGrid(gridCol), calculateTileYInGrid(gridRow));
            tileToBeMoved.startMovingToTarget(velocity);
            movingTiles.add(tileToBeMoved);
            tileToBeMoved.setGridCell(gridCol, gridRow);
            tileGrid[gridCol][gridRow] = tileToBeMoved;
    }
    public void moveTile(CrushSagaTile tileToBeMoved,int x,int y,int velocity)
    {
        tileToBeMoved.setTarget(x, y);
        tileToBeMoved.startMovingToTarget(velocity);
        movingTiles.add(tileToBeMoved);
        
        
        
    }
    public void fillEmptyCells()
    {
        for(int i = 0;i < gridColumns;i++){
            for(int j = 0;j < gridRows;j++){
                if(tileGrid[i][j] == null){
                    CrushSagaTile newTile = generateRandomTile();
                    moveTileWithinGrid(newTile,i,j,MAX_TILE_VELOCITY);
                }
            }
        }
    }
    public void endGameAsWin()
    {
        super.endGameAsWin();
        long gameTime = endTime.getTimeInMillis() - startTime.getTimeInMillis();
        //IF GAME SCORE IS TWICE THE SCORE REQUIRED, REWARD 3 STARS,ELSE IF 1.5 TIMES SCORE REQUIRED REWARD 2 STARS,ETC
        if(gameScore >= scoreRequired * 2){
        ((CrushSagaMiniGame)game).getPlayerRecord().addWin(currentLevel, gameScore, 3, gameTime);
        game.getGUIDecor().get(STAR_ONE_TYPE).setState(FILLED_STATE);
            game.getGUIDecor().get(STAR_TWO_TYPE).setState(FILLED_STATE);
            game.getGUIDecor().get(STAR_THREE_TYPE).setState(FILLED_STATE);
        }else if(gameScore >= scoreRequired * 1.5){
            ((CrushSagaMiniGame)game).getPlayerRecord().addWin(currentLevel, gameScore, 2, gameTime);
            game.getGUIDecor().get(STAR_ONE_TYPE).setState(FILLED_STATE);
            game.getGUIDecor().get(STAR_TWO_TYPE).setState(FILLED_STATE);
            game.getGUIDecor().get(STAR_THREE_TYPE).setState(UNFILLED_STATE);
        }else if(gameScore >= scoreRequired){
            ((CrushSagaMiniGame)game).getPlayerRecord().addWin(currentLevel, gameScore, 1, gameTime);
            game.getGUIDecor().get(STAR_ONE_TYPE).setState(FILLED_STATE);
            game.getGUIDecor().get(STAR_TWO_TYPE).setState(UNFILLED_STATE);
            game.getGUIDecor().get(STAR_THREE_TYPE).setState(UNFILLED_STATE);
        }else{
            ((CrushSagaMiniGame)game).getPlayerRecord().addWin(currentLevel, gameScore, 0, gameTime);
        }
        ((CrushSagaMiniGame)game).savePlayerRecord();
        
        //((MahjongSolitaireMiniGame)miniGame).savePlayerRecord();
        
        game.getGUIDialogs().get(WIN_DIALOG_TYPE).setState(VISIBLE_STATE);
        timer.cancel();
        timer.purge();
    }
    public void endGameAsLoss()
    {
        super.endGameAsLoss();
        //((MahjongSolitaireMiniGame)miniGame).getPlayerRecord().addLoss(currentLevel);
        //((MahjongSolitaireMiniGame)miniGame).savePlayerRecord();
        game.getGUIDialogs().get(LOSE_DIALOG_TYPE).setState(VISIBLE_STATE);
        timer.cancel();
        timer.purge();
    }
    public void swapTiles(CrushSagaTile t1,CrushSagaTile t2)
    {
            int tempCol = t2.getGridColumn();
            int tempRow = t2.getGridRow();
            moveTileWithinGrid(t2,t1.getGridColumn(),t1.getGridRow(),TILE_GRID_VELOCITY);
            moveTileWithinGrid(t1,tempCol,tempRow,TILE_GRID_VELOCITY);
    }
    public boolean XOR(boolean x,boolean y)
    {
        if((x && !y) || (!x && y))
            return true;
        return false;
    }
    public int getGridColumns()
    {
        return gridColumns;
    }
    public int getGridRows()
    {
        return gridRows;
    }
    public String getCurrentLevel(){
        return currentLevel;
    }
    public int getScoreRequired(){
        return scoreRequired;
    }
    public int getStarsEarned(){
        return starsEarned;
    }
    public void setScoreRequired(int req){
        scoreRequired = req;
    }
    public void setStarsEarned(int stars){
        starsEarned = stars;
    }
    public void setGridColumns(int columns)
    {
        gridColumns = columns;
    }
    public void setGridRows(int rows)
    {
        gridRows = rows;
    }
    public void setCurrentLevel(String level){
        currentLevel = level;
    }
    public ArrayList<CrushSagaTile> getStackTiles()
    {
        return stackTiles;
    }
    public Iterator<CrushSagaTile> getMovingTiles()
    {
        return movingTiles.iterator();
    }
    public CrushSagaTile [][] getTileGrid()
    {
        return tileGrid;
    }
    public void emptyStackTiles()
    {
        stackTiles = new ArrayList();
    }
    /**
     * This method creates and returns a textual description of
     * the timeInMillis argument as a time duration in the format
     * of (H:MM:SS).
     * 
     * @param timeInMillis The time to be represented textually.
     * 
     * @return A textual representation of timeInMillis.
     */
    public String timeToText(long timeInMillis)
    {
        // FIRST CALCULATE THE NUMBER OF HOURS,
        // SECONDS, AND MINUTES
        long hours = timeInMillis/MILLIS_IN_AN_HOUR;
        timeInMillis -= hours * MILLIS_IN_AN_HOUR;        
        long minutes = timeInMillis/MILLIS_IN_A_MINUTE;
        timeInMillis -= minutes * MILLIS_IN_A_MINUTE;
        long seconds = timeInMillis/MILLIS_IN_A_SECOND;
              
        // THEN ADD THE TIME OF GAME SUMMARIZED IN PARENTHESES
        String minutesText = "" + minutes;
        if (minutes < 10)   minutesText = "0" + minutesText;
        String secondsText = "" + seconds;
        if (seconds < 10)   secondsText = "0" + secondsText;
        return hours + ":" + minutesText + ":" + secondsText;
    }

    /**
     * This method builds and returns a textual representation of
     * the game time. Note that the game may still be in progress.
     * 
     * @return The duration of the current game represented textually.
     */
    public String gameTimeToText()
    {
        // CALCULATE GAME TIME USING HOURS : MINUTES : SECONDS
        if ((startTime == null) || (endTime == null))
            return "";
        long timeInMillis = endTime.getTimeInMillis() - startTime.getTimeInMillis();
        return timeToText(timeInMillis);
    }
    public int getGameScore()
    {
        return gameScore;
    }
    public void setGameScore(int score)
    {
        gameScore = score;
    }
    /*
     * Called when a new game is started
     */
    @Override
    public void reset(MiniGame game) {
        selectedTile = null;
        emptyStackTiles();//empty tiles of stack and start brand new
        initTiles();//initiate random tiles again
        for(int i = 0;i < gridColumns;i++){
            for(int j = 0;j < gridRows;j++){
                CrushSagaTile tile = stackTiles.remove(stackTiles.size()-1);
                //put it in grid
                moveTileWithinGrid(tile,i,j,MAX_TILE_VELOCITY);
            }
        }
        beginGame();
        //reset time and score
        startTime = new GregorianCalendar();
        gameScore = 0;
        timer = new Timer();
            timer.scheduleAtFixedRate(new TimerTask(){
            public void run(){
                if(movingTiles.size()==0)
                {
                    if(inProgress())
                    {
                        deleteMatches();
                    }
                    if(inProgress() && gameScore >= scoreRequired && !deleteMatches())
                    {
                        endGameAsWin();
                    }
                }
            }
            }, 0, 100);
            timer.scheduleAtFixedRate(new TimerTask(){
                public void run(){
                    if(movingTiles.size() == 0 && inProgress() && !movesRemaining()){
                       endGameAsLoss();
                    }
                }
            },0,100);
            
    }
    /**
     * Called each frame, this method updates all the game objects.
     * 
     * @param game The game to be updated.
     */
    @Override
    public void updateAll(MiniGame game) {
     
        try{
            game.beginUsingData();
            //if game is still in progress, keep track of time
            if(inProgress())
            endTime = new GregorianCalendar();
            for(int i = 0;i < movingTiles.size();i++)
            {
                CrushSagaTile tile = movingTiles.get(i);
                tile.update(game);
                
                if(!tile.isMovingToTarget())
                {
                    movingTiles.remove(tile);
                }   
            }
        }finally{
            game.endUsingData();
        }
        
    }

    @Override
    public void updateDebugText(MiniGame game) {
     
    }
    
}
